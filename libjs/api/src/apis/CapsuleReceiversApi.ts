/* tslint:disable */
/* eslint-disable */
/**
 * Memoorje API
 * Sicherer, selbstverwalteter digitaler Nachlass f√ºr alle
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CapsuleReceiver,
    CapsuleReceiverFromJSON,
    CapsuleReceiverToJSON,
} from '../models';

export interface CapsuleReceiversCreateRequest {
    capsule: string;
    email: string;
    id: number;
    url: string;
}

export interface CapsuleReceiversDestroyRequest {
    id: number;
}

export interface CapsuleReceiversListRequest {
    capsule?: string;
}

export interface CapsuleReceiversRetrieveRequest {
    id: number;
}

/**
 * 
 */
export class CapsuleReceiversApi extends runtime.BaseAPI {

    /**
     * Capsule content access for authenticated users
     */
    async capsuleReceiversCreateRaw(requestParameters: CapsuleReceiversCreateRequest): Promise<runtime.ApiResponse<CapsuleReceiver>> {
        if (requestParameters.capsule === null || requestParameters.capsule === undefined) {
            throw new runtime.RequiredError('capsule','Required parameter requestParameters.capsule was null or undefined when calling capsuleReceiversCreate.');
        }

        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling capsuleReceiversCreate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling capsuleReceiversCreate.');
        }

        if (requestParameters.url === null || requestParameters.url === undefined) {
            throw new runtime.RequiredError('url','Required parameter requestParameters.url was null or undefined when calling capsuleReceiversCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.capsule !== undefined) {
            formParams.append('capsule', requestParameters.capsule as any);
        }

        if (requestParameters.email !== undefined) {
            formParams.append('email', requestParameters.email as any);
                    }

        if (requestParameters.id !== undefined) {
            formParams.append('id', requestParameters.id as any);
        }

        if (requestParameters.url !== undefined) {
            formParams.append('url', requestParameters.url as any);
        }

        const response = await this.request({
            path: `/api/capsule-receivers/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CapsuleReceiverFromJSON(jsonValue));
    }

    /**
     * Capsule content access for authenticated users
     */
    async capsuleReceiversCreate(requestParameters: CapsuleReceiversCreateRequest): Promise<CapsuleReceiver> {
        const response = await this.capsuleReceiversCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Capsule content access for authenticated users
     */
    async capsuleReceiversDestroyRaw(requestParameters: CapsuleReceiversDestroyRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling capsuleReceiversDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/capsule-receivers/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Capsule content access for authenticated users
     */
    async capsuleReceiversDestroy(requestParameters: CapsuleReceiversDestroyRequest): Promise<void> {
        await this.capsuleReceiversDestroyRaw(requestParameters);
    }

    /**
     * Capsule content access for authenticated users
     */
    async capsuleReceiversListRaw(requestParameters: CapsuleReceiversListRequest): Promise<runtime.ApiResponse<Array<CapsuleReceiver>>> {
        const queryParameters: any = {};

        if (requestParameters.capsule !== undefined) {
            queryParameters['capsule'] = requestParameters.capsule;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/capsule-receivers/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CapsuleReceiverFromJSON));
    }

    /**
     * Capsule content access for authenticated users
     */
    async capsuleReceiversList(requestParameters: CapsuleReceiversListRequest): Promise<Array<CapsuleReceiver>> {
        const response = await this.capsuleReceiversListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Capsule content access for authenticated users
     */
    async capsuleReceiversRetrieveRaw(requestParameters: CapsuleReceiversRetrieveRequest): Promise<runtime.ApiResponse<CapsuleReceiver>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling capsuleReceiversRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/capsule-receivers/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CapsuleReceiverFromJSON(jsonValue));
    }

    /**
     * Capsule content access for authenticated users
     */
    async capsuleReceiversRetrieve(requestParameters: CapsuleReceiversRetrieveRequest): Promise<CapsuleReceiver> {
        const response = await this.capsuleReceiversRetrieveRaw(requestParameters);
        return await response.value();
    }

}
