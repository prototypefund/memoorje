/* tslint:disable */
/* eslint-disable */
/**
 * Memoorje API
 * Sicherer, selbstverwalteter digitaler Nachlass f√ºr alle
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Capsule,
    CapsuleFromJSON,
    CapsuleToJSON,
} from '../models';

export interface CapsulesCreateRequest {
    createdOn: Date;
    id: string;
    name: string;
    updatedOn: Date;
    url: string;
    description?: string;
}

export interface CapsulesDestroyRequest {
    id: string;
}

export interface CapsulesPartialUpdateRequest {
    id: string;
    createdOn?: Date;
    description?: string;
    id2?: string;
    name?: string;
    updatedOn?: Date;
    url?: string;
}

export interface CapsulesRetrieveRequest {
    id: string;
}

export interface CapsulesUpdateRequest {
    id: string;
    createdOn: Date;
    id2: string;
    name: string;
    updatedOn: Date;
    url: string;
    description?: string;
}

/**
 * 
 */
export class CapsulesApi extends runtime.BaseAPI {

    /**
     * Capsule access for authenticated users
     */
    async capsulesCreateRaw(requestParameters: CapsulesCreateRequest): Promise<runtime.ApiResponse<Capsule>> {
        if (requestParameters.createdOn === null || requestParameters.createdOn === undefined) {
            throw new runtime.RequiredError('createdOn','Required parameter requestParameters.createdOn was null or undefined when calling capsulesCreate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling capsulesCreate.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling capsulesCreate.');
        }

        if (requestParameters.updatedOn === null || requestParameters.updatedOn === undefined) {
            throw new runtime.RequiredError('updatedOn','Required parameter requestParameters.updatedOn was null or undefined when calling capsulesCreate.');
        }

        if (requestParameters.url === null || requestParameters.url === undefined) {
            throw new runtime.RequiredError('url','Required parameter requestParameters.url was null or undefined when calling capsulesCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.createdOn !== undefined) {
            formParams.append('createdOn', requestParameters.createdOn as any);
        }

        if (requestParameters.description !== undefined) {
            formParams.append('description', requestParameters.description as any);
        }

        if (requestParameters.id !== undefined) {
            formParams.append('id', requestParameters.id as any);
                    }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        if (requestParameters.updatedOn !== undefined) {
            formParams.append('updatedOn', requestParameters.updatedOn as any);
        }

        if (requestParameters.url !== undefined) {
            formParams.append('url', requestParameters.url as any);
        }

        const response = await this.request({
            path: `/api/capsules/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CapsuleFromJSON(jsonValue));
    }

    /**
     * Capsule access for authenticated users
     */
    async capsulesCreate(requestParameters: CapsulesCreateRequest): Promise<Capsule> {
        const response = await this.capsulesCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Capsule access for authenticated users
     */
    async capsulesDestroyRaw(requestParameters: CapsulesDestroyRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling capsulesDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/capsules/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Capsule access for authenticated users
     */
    async capsulesDestroy(requestParameters: CapsulesDestroyRequest): Promise<void> {
        await this.capsulesDestroyRaw(requestParameters);
    }

    /**
     * Capsule access for authenticated users
     */
    async capsulesListRaw(): Promise<runtime.ApiResponse<Array<Capsule>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/capsules/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CapsuleFromJSON));
    }

    /**
     * Capsule access for authenticated users
     */
    async capsulesList(): Promise<Array<Capsule>> {
        const response = await this.capsulesListRaw();
        return await response.value();
    }

    /**
     * Capsule access for authenticated users
     */
    async capsulesPartialUpdateRaw(requestParameters: CapsulesPartialUpdateRequest): Promise<runtime.ApiResponse<Capsule>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling capsulesPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.createdOn !== undefined) {
            formParams.append('createdOn', requestParameters.createdOn as any);
        }

        if (requestParameters.description !== undefined) {
            formParams.append('description', requestParameters.description as any);
        }

        if (requestParameters.id2 !== undefined) {
            formParams.append('id', requestParameters.id2 as any);
                    }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        if (requestParameters.updatedOn !== undefined) {
            formParams.append('updatedOn', requestParameters.updatedOn as any);
        }

        if (requestParameters.url !== undefined) {
            formParams.append('url', requestParameters.url as any);
        }

        const response = await this.request({
            path: `/api/capsules/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CapsuleFromJSON(jsonValue));
    }

    /**
     * Capsule access for authenticated users
     */
    async capsulesPartialUpdate(requestParameters: CapsulesPartialUpdateRequest): Promise<Capsule> {
        const response = await this.capsulesPartialUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Capsule access for authenticated users
     */
    async capsulesRetrieveRaw(requestParameters: CapsulesRetrieveRequest): Promise<runtime.ApiResponse<Capsule>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling capsulesRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/capsules/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CapsuleFromJSON(jsonValue));
    }

    /**
     * Capsule access for authenticated users
     */
    async capsulesRetrieve(requestParameters: CapsulesRetrieveRequest): Promise<Capsule> {
        const response = await this.capsulesRetrieveRaw(requestParameters);
        return await response.value();
    }

    /**
     * Capsule access for authenticated users
     */
    async capsulesUpdateRaw(requestParameters: CapsulesUpdateRequest): Promise<runtime.ApiResponse<Capsule>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling capsulesUpdate.');
        }

        if (requestParameters.createdOn === null || requestParameters.createdOn === undefined) {
            throw new runtime.RequiredError('createdOn','Required parameter requestParameters.createdOn was null or undefined when calling capsulesUpdate.');
        }

        if (requestParameters.id2 === null || requestParameters.id2 === undefined) {
            throw new runtime.RequiredError('id2','Required parameter requestParameters.id2 was null or undefined when calling capsulesUpdate.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling capsulesUpdate.');
        }

        if (requestParameters.updatedOn === null || requestParameters.updatedOn === undefined) {
            throw new runtime.RequiredError('updatedOn','Required parameter requestParameters.updatedOn was null or undefined when calling capsulesUpdate.');
        }

        if (requestParameters.url === null || requestParameters.url === undefined) {
            throw new runtime.RequiredError('url','Required parameter requestParameters.url was null or undefined when calling capsulesUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.createdOn !== undefined) {
            formParams.append('createdOn', requestParameters.createdOn as any);
        }

        if (requestParameters.description !== undefined) {
            formParams.append('description', requestParameters.description as any);
        }

        if (requestParameters.id2 !== undefined) {
            formParams.append('id', requestParameters.id2 as any);
                    }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        if (requestParameters.updatedOn !== undefined) {
            formParams.append('updatedOn', requestParameters.updatedOn as any);
        }

        if (requestParameters.url !== undefined) {
            formParams.append('url', requestParameters.url as any);
        }

        const response = await this.request({
            path: `/api/capsules/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CapsuleFromJSON(jsonValue));
    }

    /**
     * Capsule access for authenticated users
     */
    async capsulesUpdate(requestParameters: CapsulesUpdateRequest): Promise<Capsule> {
        const response = await this.capsulesUpdateRaw(requestParameters);
        return await response.value();
    }

}
